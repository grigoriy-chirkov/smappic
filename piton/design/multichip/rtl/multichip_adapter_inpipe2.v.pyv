// ========== Copyright Header Begin ============================================
// Copyright (c) 2023 Princeton University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ========== Copyright Header End ============================================


`include "axi_defines.vh"
`include "define.tmp.h"

<%
from pyhplib import *
MA_SHARER_SET_WIDTH = 64
%>

module multichip_adapter_inpipe2 (
    input clk,
    input rst_n,
    input [`CEP_CHIPID_WIDTH-1:0]                  mychipid,

    // Noc interface
    output  wire                                   noc_val,
    output  wire [`NOC_DATA_WIDTH-1:0]             noc_data,
    input   wire                                   noc_rdy,

    // CEP interace
    input  wire                                    cep_val,
    input  wire  [`CEP_DATA_WIDTH-1:0]             cep_data,
    output wire                                    cep_rdy,

    output wire                                   mshr_out_write_en,
    output wire [`MA_MSHR_INDEX_WIDTH-1:0]        mshr_out_write_index,
    output wire [`MA_MSHR_ARRAY_WIDTH-1:0]        mshr_out_write_data,
    output wire [`MA_MSHR_INDEX_WIDTH-1:0]        mshr_out_read_index,
    input  wire [`MA_MSHR_ARRAY_WIDTH-1:0]        mshr_out_read_data,
    input  wire [`MA_MSHR_STATE_BITS-1:0]         mshr_out_read_state,

    input  wire [`MA_MSHR_INDEX_WIDTH-1:0]        mshr_in_empty_index,
    input  wire [`MA_MSHR_INDEX_WIDTH:0]          mshr_in_empty_slots,
    output wire                                   mshr_in_write_en,
    output wire [`MA_MSHR_INDEX_WIDTH-1:0]        mshr_in_write_index,
    output wire [`MA_MSHR_ARRAY_WIDTH-1:0]        mshr_in_write_data, 
    output wire [`MA_SHARER_BITS_WIDTH:0]         mshr_in_write_counter,
    input  wire                                   stall_mshr_in_from_p3,

    // Dir interface
    output wire                                   dir_rd_en,
    output wire [`MA_ADDR_WIDTH-1:0]              dir_rd_addr,
    input  wire                                   dir_rd_hit,
    input  wire [`MA_SET_WIDTH-1:0]               dir_rd_set,
    input  wire [`MA_WAY_WIDTH-1:0]               dir_rd_way,
    input  wire [`MA_TAG_WIDTH-1:0]               dir_rd_tag,
    input  wire [`MA_STATE_WIDTH-1:0]             dir_rd_state,
    input  wire                                   dir_rd_shared,
    input  wire [`MA_SHARER_SET_WIDTH-1:0]        dir_rd_sharer_set,
    input  wire [`MA_WAY_WIDTH:0]                 dir_num_empty_ways,
    input  wire [`MA_WAY_WIDTH-1:0]               dir_empty_way,

    output wire                                   dir_wr_en,
    output wire [`MA_SET_WIDTH-1:0]               dir_wr_set,
    output wire [`MA_WAY_WIDTH-1:0]               dir_wr_way,
    output wire [`MA_TAG_WIDTH-1:0]               dir_wr_tag,
    output wire [`MA_STATE_WIDTH-1:0]             dir_wr_state,
    output wire [`MA_SHARER_SET_WIDTH-1:0]        dir_wr_sharer_set
);


wire stall_S1;
wire stall_S2;
wire stall_S3;

wire val_S1;
reg val_S2;
reg val_S3;

// Stage 1

wire val_S2_next = val_S1 & ~stall_S1;
wire [`CEP_DATA_WIDTH-1:0]  data_S1 = cep_data;
wire [`CEP_DATA_WIDTH-1:0] data_S2_next = data_S1;

wire [`PHY_ADDR_WIDTH-1:0] msg_addr_S1 = data_S1[`MSG_ADDR];
wire [`MSG_TYPE_WIDTH-1:0] msg_type_S1 = data_S1[`MSG_TYPE];
wire inv_msg_S1 = (msg_type_S1 == `MSG_TYPE_STORE_FWD) |
                  (msg_type_S1 == `MSG_TYPE_INV_FWD  ) ;
wire do_rd_tag_S1 = inv_msg_S1;
assign dir_rd_en = val_S1 & ~stall_S1 & do_rd_tag_S1;
assign dir_rd_addr = msg_addr_S1[`MA_ADDR_WIDTH-1:0];

assign val_S1 = cep_val;
assign cep_rdy = ~stall_S1;
assign stall_S1 = stall_S2 & val_S1;

// Stage 1-> 2

reg [`CEP_DATA_WIDTH-1:0] data_S2;
always @(posedge clk) begin
    if (~rst_n) begin
        val_S2 <= 1'b0;
        data_S2 <= `CEP_DATA_WIDTH'b0;
    end
    else if (~stall_S2) begin
        val_S2 <= val_S2_next;
        data_S2 <= data_S2_next;
    end
end


// Stage 2

wire val_S3_next = val_S2 & ~stall_S2;
wire [`MSG_MSHRID_WIDTH-1:0] msg_mshrid_S2 = data_S2[`MSG_MSHRID];
wire [`MSG_TYPE_WIDTH-1:0] msg_type_S2 = data_S2[`MSG_TYPE];
wire [`PHY_ADDR_WIDTH-1:0] msg_addr_S2 = data_S2[`MSG_ADDR];
wire inv_msg_S2 = (msg_type_S2 == `MSG_TYPE_STORE_FWD) |
                  (msg_type_S2 == `MSG_TYPE_INV_FWD  ) ;
wire do_read_mshr_S2 = (msg_type_S2 != `MSG_TYPE_LOAD_FWD)    & 
                       (msg_type_S2 != `MSG_TYPE_STORE_FWD)   &
                       (msg_type_S2 != `MSG_TYPE_INV_FWD)     &
                       (msg_type_S2 != `MSG_TYPE_LOAD_MEM)    &
                       (msg_type_S2 != `MSG_TYPE_STORE_MEM)   &
                       (msg_type_S2 != `MSG_TYPE_NC_LOAD_MEM) &
                       (msg_type_S2 != `MSG_TYPE_NC_STORE_MEM);
assign mshr_out_write_en = val_S2 & ~stall_S2 & do_read_mshr_S2;
assign mshr_out_write_index = msg_mshrid_S2[`MA_MSHR_INDEX_WIDTH-1:0];
assign mshr_out_write_data = `MA_MSHR_ARRAY_WIDTH'b0;
assign mshr_out_read_index = msg_mshrid_S2[`MA_MSHR_INDEX_WIDTH-1:0];
wire [`MSG_MSHRID_WIDTH-1:0] src_mshrid_S2;
wire [`MSG_SRC_CHIPID_WIDTH-1:0] src_chipid_S2;
wire [`MSG_SRC_X_WIDTH-1:0] src_x_S2;
wire [`MSG_SRC_Y_WIDTH-1:0] src_y_S2;
wire [`MSG_SRC_FBITS_WIDTH-1:0] src_fbits_S2;

multichip_adapter_mshr_decoder mshr_decoder(
    .data(mshr_out_read_data),

    .addr(),
    .way(),
    .mshrid(src_mshrid_S2),
    .cache_type(),
    .data_size(),
    .msg_type(),
    .msg_l2_miss(),
    .src_chipid(src_chipid_S2),
    .src_x(src_x_S2),
    .src_y(src_y_S2),
    .src_fbits(src_fbits_S2),
    .sdid(),
    .lsid(),
    .miss_lsid(),
    .smc_miss(),
    .recycled(),
    .inv_fwd_pending()
);

wire do_write_mshr_S2 = (msg_type_S2 != `MSG_TYPE_NODATA_ACK) & 
                        (msg_type_S2 != `MSG_TYPE_DATA_ACK)   ;
assign mshr_in_write_en = val_S2 & ~stall_S2 & do_write_mshr_S2;
assign mshr_in_write_index = mshr_in_empty_index;
multichip_adapter_bitsum_64 bitsum(
    .data_in(dir_rd_sharer_set),
    .bitsum_out(mshr_in_write_counter)
);

multichip_adapter_mshr_encoder mshr_encoder(
    .data(mshr_in_write_data),

    .addr(data_S2[`MSG_ADDR]),
    .way(`MA_WAY_WIDTH'd0),
    .mshrid(data_S2[`MSG_MSHRID]),
    .cache_type(data_S2[`MSG_CACHE_TYPE]),
    .data_size(data_S2[`MSG_DATA_SIZE]),
    .msg_type(data_S2[`MSG_TYPE]),
    .msg_l2_miss(data_S2[`MSG_L2_MISS]),
    .src_chipid(data_S2[`MSG_SRC_CHIPID]),
    .src_x(data_S2[`MSG_SRC_X]),
    .src_y(data_S2[`MSG_SRC_Y]),
    .src_fbits(data_S2[`MSG_SRC_FBITS]),
    .sdid(data_S2[`MSG_SDID]),
    .lsid(data_S2[`MSG_LSID]),
    .miss_lsid(`MSG_LSID_WIDTH'd0),
    .smc_miss(1'b0),
    .recycled(1'b0),
    .inv_fwd_pending(1'b0)
);

reg [`PKG_DATA_WIDTH-1:0] data_S3_next;
always @(*) begin
    data_S3_next = data_S2;
    if (do_write_mshr_S2) begin
        data_S3_next[`MSG_MSHRID] = {{`MSG_MSHRID_WIDTH-`MA_MSHR_INDEX_WIDTH{1'b0}}, mshr_in_empty_index};
        data_S3_next[`MSG_SRC_CHIPID] = mychipid;
        data_S3_next[`MSG_SRC_X] = {`MSG_SRC_X_WIDTH{1'b1}};
        data_S3_next[`MSG_SRC_Y] = {`MSG_SRC_Y_WIDTH{1'b1}};
        data_S3_next[`MSG_SRC_FBITS] = `NOC_FBITS_L2;
    end
    if (do_read_mshr_S2) begin
        data_S3_next[`MSG_MSHRID] = src_mshrid_S2;
        data_S3_next[`MSG_DST_CHIPID] = src_chipid_S2;
        data_S3_next[`MSG_DST_X] = src_x_S2;
        data_S3_next[`MSG_DST_Y] = src_y_S2;
        data_S3_next[`MSG_DST_FBITS] = src_fbits_S2;
    end
end

wire do_write_tag_S2 = inv_msg_S2;
assign dir_wr_en = val_S2 & ~stall_S2 & do_write_tag_S2;
assign dir_wr_set = dir_rd_set;
assign dir_wr_way = dir_rd_way;
assign dir_wr_tag = msg_addr_S2[`MA_ADDR_TAG];

wire [`NOC_X_WIDTH-1:0] x_dst_S2 = data_S2[`MSG_DST_X];
wire [`NOC_Y_WIDTH-1:0] y_dst_S2 = data_S2[`MSG_DST_Y];
wire [`HOME_ID_WIDTH-1:0] flat_id_S2;
xy_to_flat_id xy_to_flat_id(
    .x_coord(x_dst_S2),
    .y_coord(y_dst_S2),
    .flat_id(flat_id_S2)
);
assign dir_wr_sharer_set = ~(`MA_SHARER_SET_WIDTH'b1 << flat_id_S2) & dir_rd_sharer_set;
assign dir_wr_state = |dir_wr_sharer_set;

wire stall_mshr_in_full_S2 = (mshr_in_empty_slots == {`MA_MSHR_INDEX_WIDTH+1{1'b0}});
wire stall_mshr_S2 = do_write_mshr_S2 & (stall_mshr_in_full_S2 | stall_mshr_in_from_p3);
assign stall_S2 = val_S2 & (stall_S3 | stall_mshr_S2 | recycle_S3);



// Stage 2-> 3

reg [`CEP_DATA_WIDTH-1:0] data_S3;
wire recycle_S3;

always @(posedge clk) begin
    if (~rst_n) begin
        val_S3 <= 1'b0;
        data_S3 <= `CEP_DATA_WIDTH'b0;
    end
    else if (~stall_S3 & ~recycle_S3) begin
        val_S3 <= val_S3_next;
        data_S3 <= data_S3_next;
    end
end

reg [`MA_SHARER_SET_WIDTH-1:0] inv_set_S3;
wire [`MA_SHARER_SET_WIDTH-1:0] inv_set_mask_S3;

always @(posedge clk) begin
    if (~rst_n) begin
        inv_set_S3 <= `MA_SHARER_SET_WIDTH'b0;
    end
    else if (~stall_S3 & ~recycle_S3 & inv_msg_S2) begin
        inv_set_S3 <= dir_rd_sharer_set;
    end
    else if (~stall_S3) begin
        inv_set_S3 <= inv_set_S3 & inv_set_mask_S3;
    end
end

wire inval_routine = |inv_set_S3;

// Stage 3

wire [`MA_SHARER_BITS_WIDTH-1:0] inv_target_S3;
<%
import math
def clog2(x):
    return math.ceil(math.log2(x))
print(f'multichip_adapter_prio_encoder_{clog2(MA_SHARER_SET_WIDTH)} prio_encoder')
%>
(
    .data_in        (inv_set_S3),
    .data_out       (inv_target_S3),
    .data_out_mask  (inv_set_mask_S3),
    .nonzero_out    ()
);
assign recycle_S3 = val_S3 & ((inv_set_S3 & inv_set_mask_S3) != `MA_SHARER_SET_WIDTH'b0);

wire [`NOC_X_WIDTH-1:0] x_dst_S3;
wire [`NOC_Y_WIDTH-1:0] y_dst_S3;
flat_id_to_xy flat_id_to_xy(
    .x_coord(x_dst_S3),
    .y_coord(y_dst_S3),
    .flat_id(inv_target_S3)
);

wire [`MSG_HEADER_WIDTH-1:0] msg_header_S3;

multichip_adapter_inv_msg_encoder inv_msg_encoder(
    .msg_dst_chipid(data_S3[`MSG_DST_CHIPID]),
    .msg_dst_x(x_dst_S3),
    .msg_dst_y(y_dst_S3),
    .msg_dst_fbits(`NOC_FBITS_L1),
    .msg_length(`MSG_LENGTH_WIDTH'd2),
    .msg_type(data_S3[`MSG_TYPE]),
    .msg_mshrid(data_S3[`MSG_MSHRID]),
    .msg_data_size(`MSG_DATA_SIZE_16B),
    .msg_cache_type(data_S3[`MSG_CACHE_TYPE]),
    .msg_subline_vector({`L2_SUBLINE_BITS{1'b1}}),
    .msg_mesi(`MSG_MESI_I),
    .msg_l2_miss(1'b0),
    .msg_last_subline({`MSG_LAST_SUBLINE_WIDTH{1'b0}}),
    .msg_subline_id({`MSG_SUBLINE_ID_WIDTH{1'b0}}),
    .msg_addr(data_S3[`MSG_ADDR]),
    .msg_src_chipid(data_S3[`MSG_DST_CHIPID]),
    .msg_src_x({`MSG_SRC_X_WIDTH{1'b1}}),
    .msg_src_y({`MSG_SRC_Y_WIDTH{1'b1}}),
    .msg_src_fbits(`NOC_FBITS_L2),
    .msg_sdid(`MSG_SDID_WIDTH'b0),
    .msg_lsid(`MSG_LSID_WIDTH'b0),


    .msg_header(msg_header_S3)
);

reg [`CEP_DATA_WIDTH-1:0] pkg_S3;

always @(*) begin
    pkg_S3 = `PKG_DATA_WIDTH'b0;
    if (inval_routine) 
        pkg_S3[`MSG_HEADER_WIDTH-1:0] = msg_header_S3;
    else 
        pkg_S3[`CEP_DATA_WIDTH-1:0] = data_S3;
end

wire pkg_rdy;

noc_serializer noc_serializer(
    .clk(clk),
    .rst_n(rst_n),

    .flit_val(noc_val),
    .flit_data(noc_data),
    .flit_rdy(noc_rdy),

    .pkg_val(val_S3), 
    .pkg_data(pkg_S3),
    .pkg_rdy(pkg_rdy)
);

assign stall_S3 = ~pkg_rdy & val_S3;


// some mshr sanity checks 

reg mshr_err;
reg dir_err;

always @(posedge clk) begin
    if (~rst_n) begin
        mshr_err <= 1'b0;
        dir_err <= 1'b0;
    end
    else begin
        mshr_err <= mshr_err | (mshr_out_write_en & (mshr_out_read_state == `MA_MSHR_STATE_INVAL));
        dir_err <= dir_err | (dir_wr_en & (dir_rd_state == `MA_STATE_INVALID));
    end
end



endmodule