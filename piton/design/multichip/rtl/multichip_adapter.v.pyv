// ========== Copyright Header Begin ============================================
// Copyright (c) 2023 Princeton University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ========== Copyright Header End ============================================


`include "axi_defines.vh"
`include "define.tmp.h"

<%
from pyhplib import *
%>

module multichip_adapter (
    input sys_clk,
    input sys_rst_n,
    input axi_clk, 
    input axi_rst_n,
    
    // Noc interface
    output wire                               noc1_val_out,
    output wire [`NOC_DATA_WIDTH-1:0]         noc1_data_out,
    input  wire                               noc1_rdy_out,
    input  wire                               noc1_val_in,
    input  wire [`NOC_DATA_WIDTH-1:0]         noc1_data_in,
    output wire                               noc1_rdy_in,
    output wire                               noc2_val_out,
    output wire [`NOC_DATA_WIDTH-1:0]         noc2_data_out,
    input  wire                               noc2_rdy_out,
    input  wire                               noc2_val_in,
    input  wire [`NOC_DATA_WIDTH-1:0]         noc2_data_in,
    output wire                               noc2_rdy_in,
    output wire                               noc3_val_out,
    output wire [`NOC_DATA_WIDTH-1:0]         noc3_data_out,
    input  wire                               noc3_rdy_out,
    input  wire                               noc3_val_in,
    input  wire [`NOC_DATA_WIDTH-1:0]         noc3_data_in,
    output wire                               noc3_rdy_in,

    // AXI interace
    output wire [`AXI4_ID_WIDTH     -1:0]     m_axi_awid,
    output reg  [`AXI4_ADDR_WIDTH   -1:0]     m_axi_awaddr,
    output wire [`AXI4_LEN_WIDTH    -1:0]     m_axi_awlen,
    output wire [`AXI4_SIZE_WIDTH   -1:0]     m_axi_awsize,
    output wire [`AXI4_USER_WIDTH   -1:0]     m_axi_awuser,
    output wire                               m_axi_awvalid,
    input  wire                               m_axi_awready,
    output wire  [`AXI4_DATA_WIDTH   -1:0]    m_axi_wdata,
    output wire  [`AXI4_STRB_WIDTH   -1:0]    m_axi_wstrb,
    output wire                               m_axi_wlast,
    output wire                               m_axi_wvalid,
    input  wire                               m_axi_wready,
    output wire  [`AXI4_ID_WIDTH     -1:0]    m_axi_arid,
    output wire  [`AXI4_ADDR_WIDTH   -1:0]    m_axi_araddr,
    output wire  [`AXI4_LEN_WIDTH    -1:0]    m_axi_arlen,
    output wire  [`AXI4_SIZE_WIDTH   -1:0]    m_axi_arsize,
    output wire  [`AXI4_USER_WIDTH   -1:0]    m_axi_aruser,
    output wire                               m_axi_arvalid,
    input  wire                               m_axi_arready,
    input  wire  [`AXI4_ID_WIDTH     -1:0]    m_axi_rid,
    input  wire  [`AXI4_DATA_WIDTH   -1:0]    m_axi_rdata,
    input  wire  [`AXI4_RESP_WIDTH   -1:0]    m_axi_rresp,
    input  wire                               m_axi_rlast,
    input  wire                               m_axi_rvalid,
    output wire                               m_axi_rready,
    input  wire  [`AXI4_ID_WIDTH     -1:0]    m_axi_bid,
    input  wire  [`AXI4_RESP_WIDTH   -1:0]    m_axi_bresp,
    input  wire                               m_axi_bvalid,
    output wire                               m_axi_bready, 

    input  wire [`AXI4_ID_WIDTH     -1:0]     s_axi_awid,
    input  wire [`AXI4_ADDR_WIDTH   -1:0]     s_axi_awaddr,
    input  wire [`AXI4_LEN_WIDTH    -1:0]     s_axi_awlen,
    input  wire [`AXI4_SIZE_WIDTH   -1:0]     s_axi_awsize,
    input  wire                               s_axi_awvalid,
    output wire                               s_axi_awready,
    input  wire  [`AXI4_DATA_WIDTH   -1:0]    s_axi_wdata,
    input  wire  [`AXI4_STRB_WIDTH   -1:0]    s_axi_wstrb,
    input  wire                               s_axi_wlast,
    input  wire                               s_axi_wvalid,
    output wire                               s_axi_wready,
    input  wire  [`AXI4_ID_WIDTH     -1:0]    s_axi_arid,
    input  wire  [`AXI4_ADDR_WIDTH   -1:0]    s_axi_araddr,
    input  wire  [`AXI4_LEN_WIDTH    -1:0]    s_axi_arlen,
    input  wire  [`AXI4_SIZE_WIDTH   -1:0]    s_axi_arsize,
    input  wire                               s_axi_arvalid,
    output wire                               s_axi_arready,
    output wire  [`AXI4_ID_WIDTH     -1:0]    s_axi_rid,
    output wire  [`AXI4_DATA_WIDTH   -1:0]    s_axi_rdata,
    output wire  [`AXI4_RESP_WIDTH   -1:0]    s_axi_rresp,
    output wire                               s_axi_rlast,
    output wire                               s_axi_rvalid,
    input  wire                               s_axi_rready,
    output wire  [`AXI4_ID_WIDTH     -1:0]    s_axi_bid,
    output wire  [`AXI4_RESP_WIDTH   -1:0]    s_axi_bresp,
    output wire                               s_axi_bvalid,
    input  wire                               s_axi_bready, 

    input wire   [`CEP_CHIPID_WIDTH-1:0]      chipid, 
<%
for i in range(PITON_NUM_CHIPS):
    print(f"    input wire   [`AXI4_ADDR_WIDTH-1:0]       chip{i}_base, ")
%>
    input wire   [`AXI4_ADDR_WIDTH-1:0]       host_base
);

// CEP interface
wire                                    cep_queue1_val_in;
wire  [`CEP_DATA_WIDTH-1:0]             cep_queue1_data_in;
wire                                    cep_queue1_rdy_in;
wire                                    cep_queue2_val_in;
wire  [`CEP_DATA_WIDTH-1:0]             cep_queue2_data_in;
wire                                    cep_queue2_rdy_in;
wire                                    cep_queue3_val_in;
wire  [`CEP_DATA_WIDTH-1:0]             cep_queue3_data_in;
wire                                    cep_queue3_rdy_in;
wire                                    cep_queue1_val_out;
wire  [`CEP_DATA_WIDTH-1:0]             cep_queue1_data_out;
wire  [`CEP_CHIPID_WIDTH-1:0]           cep_queue1_chipid_out;
wire                                    cep_queue1_rdy_out;
wire                                    cep_queue2_val_out;
wire  [`CEP_DATA_WIDTH-1:0]             cep_queue2_data_out;
wire  [`CEP_CHIPID_WIDTH-1:0]           cep_queue2_chipid_out;
wire                                    cep_queue2_rdy_out;
wire                                    cep_queue3_val_out;
wire  [`CEP_DATA_WIDTH-1:0]             cep_queue3_data_out;
wire  [`CEP_CHIPID_WIDTH-1:0]           cep_queue3_chipid_out;
wire                                    cep_queue3_rdy_out;

axi2cep axi2cep (
    .s_axi_awid(s_axi_awid),
    .s_axi_awaddr(s_axi_awaddr),
    .s_axi_awlen(s_axi_awlen),
    .s_axi_awsize(s_axi_awsize),
    .s_axi_awvalid(s_axi_awvalid),
    .s_axi_awready(s_axi_awready),
    .s_axi_wdata(s_axi_wdata),
    .s_axi_wstrb(s_axi_wstrb),
    .s_axi_wlast(s_axi_wlast),
    .s_axi_wvalid(s_axi_wvalid),
    .s_axi_wready(s_axi_wready),
    .s_axi_arid(s_axi_arid),
    .s_axi_araddr(s_axi_araddr),
    .s_axi_arlen(s_axi_arlen),
    .s_axi_arsize(s_axi_arsize),
    .s_axi_arvalid(s_axi_arvalid),
    .s_axi_arready(s_axi_arready),
    .s_axi_rid(s_axi_rid),
    .s_axi_rdata(s_axi_rdata),
    .s_axi_rresp(s_axi_rresp),
    .s_axi_rlast(s_axi_rlast),
    .s_axi_rvalid(s_axi_rvalid),
    .s_axi_rready(s_axi_rready),
    .s_axi_bid(s_axi_bid),
    .s_axi_bresp(s_axi_bresp),
    .s_axi_bvalid(s_axi_bvalid),
    .s_axi_bready(s_axi_bready),

    // CEP interace
    .cep_queue1_val(cep_queue1_val_in),
    .cep_queue1_data(cep_queue1_data_in),
    .cep_queue1_rdy(cep_queue1_rdy_in),
    .cep_queue2_val(cep_queue2_val_in),
    .cep_queue2_data(cep_queue2_data_in),
    .cep_queue2_rdy(cep_queue2_rdy_in),
    .cep_queue3_val(cep_queue3_val_in),
    .cep_queue3_data(cep_queue3_data_in),
    .cep_queue3_rdy(cep_queue3_rdy_in),

    .chipid(chipid),

    .sys_clk(sys_clk),
    .sys_rst_n(sys_rst_n),
    .axi_clk(axi_clk),
    .axi_rst_n(axi_rst_n)
);


cep2axi cep2axi(
    // CEP interace
    .cep_queue1_val(cep_queue1_val_out),
    .cep_queue1_data(cep_queue1_data_out),
    .cep_queue1_chipid(cep_queue1_chipid_out),
    .cep_queue1_rdy(cep_queue1_rdy_out),
    .cep_queue2_val(cep_queue2_val_out),
    .cep_queue2_data(cep_queue2_data_out),
    .cep_queue2_chipid(cep_queue2_chipid_out),
    .cep_queue2_rdy(cep_queue2_rdy_out),
    .cep_queue3_val(cep_queue3_val_out),
    .cep_queue3_data(cep_queue3_data_out),
    .cep_queue3_chipid(cep_queue3_chipid_out),
    .cep_queue3_rdy(cep_queue3_rdy_out),

    .m_axi_awid(m_axi_awid),
    .m_axi_awaddr(m_axi_awaddr),
    .m_axi_awlen(m_axi_awlen),
    .m_axi_awsize(m_axi_awsize),
    .m_axi_awuser(m_axi_awuser),
    .m_axi_awvalid(m_axi_awvalid),
    .m_axi_awready(m_axi_awready),
    .m_axi_wdata(m_axi_wdata),
    .m_axi_wstrb(m_axi_wstrb),
    .m_axi_wlast(m_axi_wlast),
    .m_axi_wvalid(m_axi_wvalid),
    .m_axi_wready(m_axi_wready),
    .m_axi_arid(m_axi_arid),
    .m_axi_araddr(m_axi_araddr),
    .m_axi_arlen(m_axi_arlen),
    .m_axi_arsize(m_axi_arsize),
    .m_axi_aruser(m_axi_aruser),
    .m_axi_arvalid(m_axi_arvalid),
    .m_axi_arready(m_axi_arready),
    .m_axi_rid(m_axi_rid),
    .m_axi_rdata(m_axi_rdata),
    .m_axi_rresp(m_axi_rresp),
    .m_axi_rlast(m_axi_rlast),
    .m_axi_rvalid(m_axi_rvalid),
    .m_axi_rready(m_axi_rready),
    .m_axi_bid(m_axi_bid),
    .m_axi_bresp(m_axi_bresp),
    .m_axi_bvalid(m_axi_bvalid),
    .m_axi_bready(m_axi_bready),

    .axi_clk(axi_clk),
    .axi_rst_n(axi_rst_n),
    .sys_clk(sys_clk),
    .sys_rst_n(sys_rst_n),

    .chipid       (chipid), 
<%
for i in range(PITON_NUM_CHIPS):
    print(f"    .chip{i}_base(chip{i}_base),")
%>
    .host_base    (host_base)
);

multichip_adapter_core multichip_adapter_core(
    .clk(sys_clk),
    .rst_n(sys_rst_n),
    .mychipid(chipid),

    // noc interface
    .noc1_val_in(noc1_val_in),
    .noc1_data_in(noc1_data_in),
    .noc1_rdy_in(noc1_rdy_in),
    .noc1_val_out(noc1_val_out),
    .noc1_data_out(noc1_data_out),
    .noc1_rdy_out(noc1_rdy_out),
    .noc2_val_in(noc2_val_in),
    .noc2_data_in(noc2_data_in),
    .noc2_rdy_in(noc2_rdy_in),
    .noc2_val_out(noc2_val_out),
    .noc2_data_out(noc2_data_out),
    .noc2_rdy_out(noc2_rdy_out),
    .noc3_val_in(noc3_val_in),
    .noc3_data_in(noc3_data_in),
    .noc3_rdy_in(noc3_rdy_in),
    .noc3_val_out(noc3_val_out),
    .noc3_data_out(noc3_data_out),
    .noc3_rdy_out(noc3_rdy_out),

    // cep interface
    .cep_queue1_val_in(cep_queue1_val_in),
    .cep_queue1_data_in(cep_queue1_data_in),
    .cep_queue1_rdy_in(cep_queue1_rdy_in),
    .cep_queue2_val_in(cep_queue2_val_in),
    .cep_queue2_data_in(cep_queue2_data_in),
    .cep_queue2_rdy_in(cep_queue2_rdy_in),
    .cep_queue3_val_in(cep_queue3_val_in),
    .cep_queue3_data_in(cep_queue3_data_in),
    .cep_queue3_rdy_in(cep_queue3_rdy_in),
    .cep_queue1_val_out(cep_queue1_val_out),
    .cep_queue1_data_out(cep_queue1_data_out),
    .cep_queue1_chipid_out(cep_queue1_chipid_out),
    .cep_queue1_rdy_out(cep_queue1_rdy_out),
    .cep_queue2_val_out(cep_queue2_val_out),
    .cep_queue2_data_out(cep_queue2_data_out),
    .cep_queue2_chipid_out(cep_queue2_chipid_out),
    .cep_queue2_rdy_out(cep_queue2_rdy_out),
    .cep_queue3_val_out(cep_queue3_val_out),
    .cep_queue3_data_out(cep_queue3_data_out),
    .cep_queue3_chipid_out(cep_queue3_chipid_out),
    .cep_queue3_rdy_out(cep_queue3_rdy_out)
);

endmodule