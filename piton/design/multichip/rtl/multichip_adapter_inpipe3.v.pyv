// ========== Copyright Header Begin ============================================
// Copyright (c) 2023 Princeton University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ========== Copyright Header End ============================================


`include "axi_defines.vh"
`include "define.tmp.h"

<%
from pyhplib import *
%>

module multichip_adapter_inpipe3 (
    input clk,
    input rst_n,

    // Noc interface
    output  wire                                   noc_val,
    output  wire [`NOC_DATA_WIDTH-1:0]             noc_data,
    input   wire                                   noc_rdy,

    // CEP interace
    input  wire                                    cep_val,
    input  wire  [`CEP_DATA_WIDTH-1:0]             cep_data,
    output wire                                    cep_rdy,

    output wire                                   mshr_write_en,
    output wire [`MA_MSHR_INDEX_WIDTH-1:0]        mshr_write_index,
    output wire [`MA_MSHR_ARRAY_WIDTH-1:0]        mshr_write_data,
    output wire [`MA_MSHR_INDEX_WIDTH-1:0]        mshr_read_index,
    input  wire [`MA_MSHR_ARRAY_WIDTH-1:0]        mshr_read_data,
    input  wire [`MA_MSHR_STATE_BITS-1:0]         mshr_read_state
);


wire stall_S1;
wire stall_S2;
wire stall_S3;

wire val_S1;
reg val_S2;
reg val_S3;

// Stage 1

wire val_S2_next = val_S1 & ~stall_S1;
wire [`CEP_DATA_WIDTH-1:0]  data_S1 = cep_data;
wire [`CEP_DATA_WIDTH-1:0] data_S2_next = data_S1;
assign val_S1 = cep_val;
assign cep_rdy = ~stall_S1;
assign stall_S1 = stall_S2 & val_S1;

// Stage 1-> 2

reg [`CEP_DATA_WIDTH-1:0] data_S2;
always @(posedge clk) begin
    if (~rst_n) begin
        val_S2 <= 1'b0;
        data_S2 <= `CEP_DATA_WIDTH'b0;
    end
    else if (~stall_S2) begin
        val_S2 <= val_S2_next;
        data_S2 <= data_S2_next;
    end
end

// Stage 2

wire val_S3_next = val_S2 & ~stall_S2;
wire [`MSG_MSHRID_WIDTH-1:0] msg_mshrid_S2 = data_S2[`MSG_MSHRID];
wire [`MSG_TYPE_WIDTH-1:0] msg_type_S2 = data_S2[`MSG_TYPE];
wire do_read_mshr_S2 = 1'b1;
// wire do_read_mshr = (msg_type != `MSG_TYPE_LOAD_FWDACK)  & 
//                     (msg_type != `MSG_TYPE_STORE_FWDACK) &
//                     (msg_type != `MSG_TYPE_INV_FWDACK)   ;
assign mshr_write_en = val_S2 & ~stall_S2 & do_read_mshr_S2;
assign mshr_write_index = msg_mshrid_S2[`MA_MSHR_INDEX_WIDTH-1:0];
assign mshr_write_data = `MA_MSHR_ARRAY_WIDTH'b0;
assign mshr_read_index = msg_mshrid_S2[`MA_MSHR_INDEX_WIDTH-1:0];
wire [`MSG_MSHRID_WIDTH-1:0] src_mshrid_S2;
wire [`MSG_SRC_CHIPID_WIDTH-1:0] src_chipid_S2;
wire [`MSG_SRC_X_WIDTH-1:0] src_x_S2;
wire [`MSG_SRC_Y_WIDTH-1:0] src_y_S2;
wire [`MSG_SRC_FBITS_WIDTH-1:0] src_fbits_S2;


multichip_adapter_mshr_decoder mshr_decoder(
    .data(mshr_read_data),

    .addr(),
    .way(),
    .mshrid(src_mshrid_S2),
    .cache_type(),
    .data_size(),
    .msg_type(),
    .msg_l2_miss(),
    .src_chipid(src_chipid_S2),
    .src_x(src_x_S2),
    .src_y(src_y_S2),
    .src_fbits(src_fbits_S2),
    .sdid(),
    .lsid(),
    .miss_lsid(),
    .smc_miss(),
    .recycled(),
    .inv_fwd_pending()
);

reg [`CEP_DATA_WIDTH-1:0] data_S3_next;
always @(*) begin
    data_S3_next = data_S2;
    if (do_read_mshr_S2) begin
        data_S3_next[`MSG_MSHRID] = src_mshrid_S2;
        data_S3_next[`MSG_DST_CHIPID] = src_chipid_S2;
        data_S3_next[`MSG_DST_X] = src_x_S2;
        data_S3_next[`MSG_DST_Y] = src_y_S2;
        data_S3_next[`MSG_DST_FBITS] = src_fbits_S2;
    end
end

assign stall_S2 = stall_S3 & val_S2;

reg mshr_err;

always @(posedge clk) begin
    if (~rst_n) begin
        mshr_err <= 1'b0;
    end
    else begin
        mshr_err <= mshr_err | (mshr_write_en & (mshr_read_state == `MA_MSHR_STATE_INVAL));
    end
end

// Stage 2-> 3

reg [`CEP_DATA_WIDTH-1:0] data_S3;
always @(posedge clk) begin
    if (~rst_n) begin
        val_S3 <= 1'b0;
        data_S3 <= `CEP_DATA_WIDTH'b0;
    end
    else if (~stall_S3) begin
        val_S3 <= val_S3_next;
        data_S3 <= data_S3_next;
    end
end


wire pkg_rdy;

noc_serializer noc_serializer(
    .clk(clk),
    .rst_n(rst_n),

    .flit_val(noc_val),
    .flit_data(noc_data),
    .flit_rdy(noc_rdy),

    .pkg_val(val_S3), 
    .pkg_data(data_S3),
    .pkg_rdy(pkg_rdy)
);

assign stall_S3 = ~pkg_rdy & val_S3;

endmodule