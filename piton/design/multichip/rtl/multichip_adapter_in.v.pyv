// ========== Copyright Header Begin ============================================
// Copyright (c) 2023 Princeton University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ========== Copyright Header End ============================================


`include "axi_defines.vh"
`include "define.tmp.h"

<%
from pyhplib import *
%>

module multichip_adapter_in (
    input sys_clk,
    input sys_rst_n,
    input axi_clk, 
    input axi_rst_n,
    
    // Noc interface
    output  wire                                   noc1_val,
    output  wire [`NOC_DATA_WIDTH-1:0]             noc1_data,
    input   wire                                   noc1_rdy,
    output  wire                                   noc2_val,
    output  wire [`NOC_DATA_WIDTH-1:0]             noc2_data,
    input   wire                                   noc2_rdy,
    output  wire                                   noc3_val,
    output  wire [`NOC_DATA_WIDTH-1:0]             noc3_data,
    input   wire                                   noc3_rdy,

    // AXI interace
    input  wire [`AXI4_ID_WIDTH     -1:0]     s_axi_awid,
    input  wire [`AXI4_ADDR_WIDTH   -1:0]     s_axi_awaddr,
    input  wire [`AXI4_LEN_WIDTH    -1:0]     s_axi_awlen,
    input  wire [`AXI4_SIZE_WIDTH   -1:0]     s_axi_awsize,
    input  wire                               s_axi_awvalid,
    output wire                               s_axi_awready,
    input  wire  [`AXI4_DATA_WIDTH   -1:0]    s_axi_wdata,
    input  wire  [`AXI4_STRB_WIDTH   -1:0]    s_axi_wstrb,
    input  wire                               s_axi_wlast,
    input  wire                               s_axi_wvalid,
    output wire                               s_axi_wready,
    input  wire  [`AXI4_ID_WIDTH     -1:0]    s_axi_arid,
    input  wire  [`AXI4_ADDR_WIDTH   -1:0]    s_axi_araddr,
    input  wire  [`AXI4_LEN_WIDTH    -1:0]    s_axi_arlen,
    input  wire  [`AXI4_SIZE_WIDTH   -1:0]    s_axi_arsize,
    input  wire                               s_axi_arvalid,
    output wire                               s_axi_arready,
    output wire  [`AXI4_ID_WIDTH     -1:0]    s_axi_rid,
    output wire  [`AXI4_DATA_WIDTH   -1:0]    s_axi_rdata,
    output wire  [`AXI4_RESP_WIDTH   -1:0]    s_axi_rresp,
    output wire                               s_axi_rlast,
    output wire                               s_axi_rvalid,
    input  wire                               s_axi_rready,
    output wire  [`AXI4_ID_WIDTH     -1:0]    s_axi_bid,
    output wire  [`AXI4_RESP_WIDTH   -1:0]    s_axi_bresp,
    output wire                               s_axi_bvalid,
    input  wire                               s_axi_bready, 

    input wire   [`NOC_CHIPID_WIDTH-1:0]      chipid, 
    input wire   [`NOC_CHIPID_WIDTH-1:0]      fpgaid
);

// CEP interface
reg                                     cep_val;
reg   [`CEP_DATA_WIDTH-1:0]             cep_data;
reg   [2:0]                             cep_queue_id;
reg   [`NOC_CHIPID_WIDTH-1:0]           cep_chipid;
wire                                    cep_rdy;

// credits
<%
print(f'''
wire [{PITON_NUM_CHIPS}:0]              cep_queue1_credits;
wire [{PITON_NUM_CHIPS}:0]              cep_queue2_credits;
wire [{PITON_NUM_CHIPS}:0]              cep_queue3_credits;
''')
%>

axi2cep axi2cep (
    .s_axi_awid(s_axi_awid),
    .s_axi_awaddr(s_axi_awaddr),
    .s_axi_awlen(s_axi_awlen),
    .s_axi_awsize(s_axi_awsize),
    .s_axi_awvalid(s_axi_awvalid),
    .s_axi_awready(s_axi_awready),
    .s_axi_wdata(s_axi_wdata),
    .s_axi_wstrb(s_axi_wstrb),
    .s_axi_wlast(s_axi_wlast),
    .s_axi_wvalid(s_axi_wvalid),
    .s_axi_wready(s_axi_wready),
    .s_axi_arid(s_axi_arid),
    .s_axi_araddr(s_axi_araddr),
    .s_axi_arlen(s_axi_arlen),
    .s_axi_arsize(s_axi_arsize),
    .s_axi_arvalid(s_axi_arvalid),
    .s_axi_arready(s_axi_arready),
    .s_axi_rid(s_axi_rid),
    .s_axi_rdata(s_axi_rdata),
    .s_axi_rresp(s_axi_rresp),
    .s_axi_rlast(s_axi_rlast),
    .s_axi_rvalid(s_axi_rvalid),
    .s_axi_rready(s_axi_rready),
    .s_axi_bid(s_axi_bid),
    .s_axi_bresp(s_axi_bresp),
    .s_axi_bvalid(s_axi_bvalid),
    .s_axi_bready(s_axi_bready),

    // CEP interace
    .cep_val(cep_val),
    .cep_data(cep_data),
    .cep_queue_id(cep_queue_id),
    .cep_chipid(cep_chipid),
    .cep_rdy(cep_rdy),

    // credits
    .cep_queue1_credits(cep_queue1_credits),
    .cep_queue2_credits(cep_queue2_credits),
    .cep_queue3_credits(cep_queue3_credits),

    .chipid(chipid),
    .fpgaid(fpgaid),

    .sys_clk(sys_clk),
    .sys_rst_n(sys_rst_n),
    .axi_clk(axi_clk),
    .axi_rst_n(axi_rst_n)
);

cep2noc cep2noc (
    // CEP interace
    .cep_val(cep_val),
    .cep_data(cep_data),
    .cep_queue_id(cep_queue_id),
    .cep_chipid(cep_chipid),
    .cep_rdy(cep_rdy),

    // credits
    .cep_queue1_credits(cep_queue1_credits),
    .cep_queue2_credits(cep_queue2_credits),
    .cep_queue3_credits(cep_queue3_credits),

    .noc1_val(noc1_val),
    .noc1_data(noc1_data),
    .noc1_rdy(noc1_rdy),
    .noc2_val(noc2_val),
    .noc2_data(noc2_data),
    .noc2_rdy(noc2_rdy),
    .noc3_val(noc3_val),
    .noc3_data(noc3_data),
    .noc3_rdy(noc3_rdy),

    .fpgaid(fpgaid),
    .clk(sys_clk),
    .rst_n(sys_rst_n)
);



endmodule