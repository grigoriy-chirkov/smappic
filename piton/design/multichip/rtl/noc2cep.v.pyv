// ========== Copyright Header Begin ============================================
// Copyright (c) 2023 Princeton University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ========== Copyright Header End ============================================

`include "cep_defines.vh"
`include "define.tmp.h"

<%
from pyhplib import *
%>


module noc2cep (
    input clk,
    input rst_n,
    
    // Noc interface
    input  wire                                   noc1_val,
    input  wire [`NOC_DATA_WIDTH-1:0]             noc1_data,
    output wire                                   noc1_rdy,
    input  wire                                   noc2_val,
    input  wire [`NOC_DATA_WIDTH-1:0]             noc2_data,
    output wire                                   noc2_rdy,
    input  wire                                   noc3_val,
    input  wire [`NOC_DATA_WIDTH-1:0]             noc3_data,
    output wire                                   noc3_rdy,

    // CEP interace
    output reg                                    cep_val,
    output reg  [`CEP_DATA_WIDTH-1:0]             cep_data,
    output reg  [2:0]                             cep_queue_id,
    input  wire                                   cep_rdy,

    // credits info
<%
print(f'''
    input wire [{PITON_NUM_CHIPS}:0] cep_queue1_credits_nz, 
    input wire [{PITON_NUM_CHIPS}:0] cep_queue2_credits_nz, 
    input wire [{PITON_NUM_CHIPS}:0] cep_queue3_credits_nz
''')
%>
);

wire pkg1_val;
wire [`PKG_DATA_WIDTH-1:0] pkg1_data;
wire pkg1_rdy;
noc_deserializer noc1_deserializer(
    .clk(clk),
    .rst_n(rst_n),
    .flit_val(noc1_val),
    .flit_data(noc1_data),
    .flit_rdy(noc1_rdy),
    .pkg_val(pkg1_val),
    .pkg_data(pkg1_data),
    .pkg_rdy(pkg1_rdy)
);

wire pkg2_val;
wire [`PKG_DATA_WIDTH-1:0] pkg2_data;
wire pkg2_rdy;
noc_deserializer noc2_deserializer(
    .clk(clk),
    .rst_n(rst_n),
    .flit_val(noc2_val),
    .flit_data(noc2_data),
    .flit_rdy(noc2_rdy),
    .pkg_val(pkg2_val),
    .pkg_data(pkg2_data),
    .pkg_rdy(pkg2_rdy)
);

wire pkg3_val;
wire [`PKG_DATA_WIDTH-1:0] pkg3_data;
wire pkg3_rdy;
noc_deserializer noc3_deserializer(
    .clk(clk),
    .rst_n(rst_n),
    .flit_val(noc3_val),
    .flit_data(noc3_data),
    .flit_rdy(noc3_rdy),
    .pkg_val(pkg3_val),
    .pkg_data(pkg3_data),
    .pkg_rdy(pkg3_rdy)
);

// translate to cep

wire cep_queue1_val;
wire [`CEP_DATA_WIDTH-1:0] cep_queue1_data;
wire [`NOC_CHIPID_WIDTH-1:0] cep_queue1_chipid;
wire cep_queue1_rdy;
wire cep_queue2_val;
wire [`CEP_DATA_WIDTH-1:0] cep_queue2_data;
wire [`NOC_CHIPID_WIDTH-1:0] cep_queue2_chipid;
wire cep_queue2_rdy;
wire cep_queue3_val;
wire [`CEP_DATA_WIDTH-1:0] cep_queue3_data;
wire [`NOC_CHIPID_WIDTH-1:0] cep_queue3_chipid;
wire cep_queue3_rdy;

pkg2cep pkg2cep(
    .clk(clk),
    .rst_n(rst_n),

    .pkg1_val(pkg1_val),
    .pkg1_data(pkg1_data),
    .pkg1_rdy(pkg1_rdy),
    .pkg2_val(pkg2_val),
    .pkg2_data(pkg2_data),
    .pkg2_rdy(pkg2_rdy),
    .pkg3_val(pkg3_val),
    .pkg3_data(pkg3_data),
    .pkg3_rdy(pkg3_rdy),

    .cep_queue1_val(cep_queue1_val),
    .cep_queue1_data(cep_queue1_data), 
    .cep_queue1_chipid(cep_queue1_chipid),
    .cep_queue1_rdy(cep_queue1_rdy),
    .cep_queue2_val(cep_queue2_val),
    .cep_queue2_data(cep_queue2_data), 
    .cep_queue2_chipid(cep_queue2_chipid),
    .cep_queue2_rdy(cep_queue2_rdy),
    .cep_queue3_val(cep_queue3_val),
    .cep_queue3_data(cep_queue3_data), 
    .cep_queue3_chipid(cep_queue3_chipid),
    .cep_queue3_rdy(cep_queue3_rdy)
);


reg [2:0] queue_chosen;
wire dispatch = (|queue_chosen) & (~cep_val | cep_rdy);

assign cep_queue1_rdy = queue_chosen[0] & dispatch;
assign cep_queue2_rdy = queue_chosen[1] & dispatch;
assign cep_queue3_rdy = queue_chosen[2] & dispatch;


//=========================================
// choose which queue goes now
//=========================================
always @(*) begin
  // always choose queue3 if its valid and we have
  // enough credits to send to destination
  queue_chosen[2] = cep_queue3_val & cep_queue3_credits_nz[cep_queue3_chipid];
  // choose queue2 if queue 3 is not chosen,
  // and we have enough credits
  queue_chosen[1] = cep_queue2_val & cep_queue2_credits_nz[cep_queue2_chipid] & ~queue_chosen[2];
  // same logic for queue1, but with even lower priority
  queue_chosen[0] = cep_queue1_val & cep_queue1_credits_nz[cep_queue1_chipid] & ~queue_chosen[2] & ~queue_chosen[1];
end



always @(posedge clk) begin
  if (~rst_n) begin
    cep_data <= `PKG_DATA_WIDTH'b0;
    cep_val <= 1'b0;
    cep_queue_id <= 3'b0;
  end 
  else begin
    if (dispatch) begin
      cep_val <= 1'b1;
      cep_queue_id <= queue_chosen;
      case (queue_chosen)
        3'b001: cep_data <= cep_queue1_data;
        3'b010: cep_data <= cep_queue2_data;
        3'b100: cep_data <= cep_queue3_data;
        default: cep_data <= `PKG_DATA_WIDTH'b0; // should never happen
      endcase
    end
    else if (cep_rdy) begin
      cep_data <= `PKG_DATA_WIDTH'b0;
      cep_val <= 1'b0;
      cep_queue_id <= 3'b0;
    end
  end
end


endmodule