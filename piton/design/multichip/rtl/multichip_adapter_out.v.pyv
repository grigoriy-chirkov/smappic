// ========== Copyright Header Begin ============================================
// Copyright (c) 2023 Princeton University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ========== Copyright Header End ============================================

`include "axi_defines.vh"
`include "define.tmp.h"

<%
from pyhplib import *
%>


module multichip_adapter_out (
    input sys_clk,
    input sys_rst_n,
    input axi_clk, 
    input axi_rst_n, 
    
    // Noc interface
    input  wire                               noc1_val,
    input  wire [`NOC_DATA_WIDTH-1:0]         noc1_data,
    output wire                               noc1_rdy,
    input  wire                               noc2_val,
    input  wire [`NOC_DATA_WIDTH-1:0]         noc2_data,
    output wire                               noc2_rdy,
    input  wire                               noc3_val,
    input  wire [`NOC_DATA_WIDTH-1:0]         noc3_data,
    output wire                               noc3_rdy,

    // AXI interace
    output wire [`AXI4_ID_WIDTH     -1:0]     m_axi_awid,
    output reg  [`AXI4_ADDR_WIDTH   -1:0]     m_axi_awaddr,
    output wire [`AXI4_LEN_WIDTH    -1:0]     m_axi_awlen,
    output wire [`AXI4_SIZE_WIDTH   -1:0]     m_axi_awsize,
    output wire [`AXI4_USER_WIDTH   -1:0]     m_axi_awuser,
    output reg                                m_axi_awvalid,
    input  wire                               m_axi_awready,
    output reg   [`AXI4_DATA_WIDTH   -1:0]    m_axi_wdata,
    output wire  [`AXI4_STRB_WIDTH   -1:0]    m_axi_wstrb,
    output wire                               m_axi_wlast,
    output reg                                m_axi_wvalid,
    input  wire                               m_axi_wready,
    output wire  [`AXI4_ID_WIDTH     -1:0]    m_axi_arid,
    output wire  [`AXI4_ADDR_WIDTH   -1:0]    m_axi_araddr,
    output wire  [`AXI4_LEN_WIDTH    -1:0]    m_axi_arlen,
    output wire  [`AXI4_SIZE_WIDTH   -1:0]    m_axi_arsize,
    output wire  [`AXI4_USER_WIDTH   -1:0]    m_axi_aruser,
    output wire                               m_axi_arvalid,
    input  wire                               m_axi_arready,
    input  wire  [`AXI4_ID_WIDTH     -1:0]    m_axi_rid,
    input  wire  [`AXI4_DATA_WIDTH   -1:0]    m_axi_rdata,
    input  wire  [`AXI4_RESP_WIDTH   -1:0]    m_axi_rresp,
    input  wire                               m_axi_rlast,
    input  wire                               m_axi_rvalid,
    output wire                               m_axi_rready,
    input  wire  [`AXI4_ID_WIDTH     -1:0]    m_axi_bid,
    input  wire  [`AXI4_RESP_WIDTH   -1:0]    m_axi_bresp,
    input  wire                               m_axi_bvalid,
    output wire                               m_axi_bready, 

    input wire   [`NOC_CHIPID_WIDTH-1:0]      chipid, 
<%
for i in range(PITON_NUM_CHIPS):
    print(f"    input wire   [`AXI4_ADDR_WIDTH-1:0]       chip{i}_base, ")
%>
    input wire   [`AXI4_ADDR_WIDTH-1:0]       host_base
);

// CEP interace
wire                                   cep_queue1_val;
wire [`CEP_DATA_WIDTH-1:0]             cep_queue1_data;
wire [`NOC_CHIPID_WIDTH-1:0]           cep_queue1_chipid;
wire                                   cep_queue1_rdy;
wire                                   cep_queue2_val;
wire [`CEP_DATA_WIDTH-1:0]             cep_queue2_data;
wire [`NOC_CHIPID_WIDTH-1:0]           cep_queue2_chipid;
wire                                   cep_queue2_rdy;
wire                                   cep_queue3_val;
wire [`CEP_DATA_WIDTH-1:0]             cep_queue3_data;
wire [`NOC_CHIPID_WIDTH-1:0]           cep_queue3_chipid;
wire                                   cep_queue3_rdy;

noc2cep noc2cep(
    .noc1_val(noc1_val),
    .noc1_data(noc1_data),
    .noc1_rdy(noc1_rdy),
    .noc2_val(noc2_val),
    .noc2_data(noc2_data),
    .noc2_rdy(noc2_rdy),
    .noc3_val(noc3_val),
    .noc3_data(noc3_data),
    .noc3_rdy(noc3_rdy),

    // CEP interace
    .cep_queue1_val(cep_queue1_val),
    .cep_queue1_data(cep_queue1_data),
    .cep_queue1_chipid(cep_queue1_chipid),
    .cep_queue1_rdy(cep_queue1_rdy),
    .cep_queue2_val(cep_queue2_val),
    .cep_queue2_data(cep_queue2_data),
    .cep_queue2_chipid(cep_queue2_chipid),
    .cep_queue2_rdy(cep_queue2_rdy),
    .cep_queue3_val(cep_queue3_val),
    .cep_queue3_data(cep_queue3_data),
    .cep_queue3_chipid(cep_queue3_chipid),
    .cep_queue3_rdy(cep_queue3_rdy),

    .clk(sys_clk),
    .rst_n(sys_rst_n)
);

cep2axi cep2axi(
    // CEP interace
    .cep_queue1_val(cep_queue1_val),
    .cep_queue1_data(cep_queue1_data),
    .cep_queue1_chipid(cep_queue1_chipid),
    .cep_queue1_rdy(cep_queue1_rdy),
    .cep_queue2_val(cep_queue2_val),
    .cep_queue2_data(cep_queue2_data),
    .cep_queue2_chipid(cep_queue2_chipid),
    .cep_queue2_rdy(cep_queue2_rdy),
    .cep_queue3_val(cep_queue3_val),
    .cep_queue3_data(cep_queue3_data),
    .cep_queue3_chipid(cep_queue3_chipid),
    .cep_queue3_rdy(cep_queue3_rdy),

    .m_axi_awid(m_axi_awid),
    .m_axi_awaddr(m_axi_awaddr),
    .m_axi_awlen(m_axi_awlen),
    .m_axi_awsize(m_axi_awsize),
    .m_axi_awuser(m_axi_awuser),
    .m_axi_awvalid(m_axi_awvalid),
    .m_axi_awready(m_axi_awready),
    .m_axi_wdata(m_axi_wdata),
    .m_axi_wstrb(m_axi_wstrb),
    .m_axi_wlast(m_axi_wlast),
    .m_axi_wvalid(m_axi_wvalid),
    .m_axi_wready(m_axi_wready),
    .m_axi_arid(m_axi_arid),
    .m_axi_araddr(m_axi_araddr),
    .m_axi_arlen(m_axi_arlen),
    .m_axi_arsize(m_axi_arsize),
    .m_axi_aruser(m_axi_aruser),
    .m_axi_arvalid(m_axi_arvalid),
    .m_axi_arready(m_axi_arready),
    .m_axi_rid(m_axi_rid),
    .m_axi_rdata(m_axi_rdata),
    .m_axi_rresp(m_axi_rresp),
    .m_axi_rlast(m_axi_rlast),
    .m_axi_rvalid(m_axi_rvalid),
    .m_axi_rready(m_axi_rready),
    .m_axi_bid(m_axi_bid),
    .m_axi_bresp(m_axi_bresp),
    .m_axi_bvalid(m_axi_bvalid),
    .m_axi_bready(m_axi_bready),

    .axi_clk(axi_clk),
    .axi_rst_n(axi_rst_n),
    .sys_clk(sys_clk),
    .sys_rst_n(sys_rst_n),

    .chipid       (chipid), 
<%
for i in range(PITON_NUM_CHIPS):
    print(f"    .chip{i}_base(chip{i}_base),")
%>
    .host_base    (host_base)
);

endmodule