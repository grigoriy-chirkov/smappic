// ========== Copyright Header Begin ============================================
// Copyright (c) 2022 Princeton University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ========== Copyright Header End ============================================

`include "define.tmp.h"
`include "axi_defines.vh"

<%
from pyhplib import *
%>

module piton_aws_config_regs (
    input clk,    // Clock
    input rst_n,  // Asynchronous reset active low
    
    input awvalid, 
    input [`AXIL_ADDR_WIDTH-1:0] awaddr, 
    output awready, 
    input wvalid, 
    input [`AXIL_DATA_WIDTH-1:0] wdata, 
    input [`AXIL_STRB_WIDTH-1:0] wstrb, 
    output wready, 
    output reg bvalid, 
    output [`AXIL_RESP_WIDTH-1:0] bresp, 
    input  bready, 
    input arvalid, 
    input [`AXIL_ADDR_WIDTH-1:0] araddr, 
    output arready, 
    output reg rvalid, 
    output reg [`AXIL_DATA_WIDTH-1:0] rdata, 
    output [`AXIL_RESP_WIDTH-1:0] rresp, 
    input rready,

    output reg [`NOC_CHIPID_WIDTH-1:0] fpgaid, 

<%
for i in range(PITON_NUM_CHIPS):
    print(f'    output reg [`AXI4_ADDR_WIDTH-1:0]  chip{i}_base,')
%>
    output reg [`AXI4_ADDR_WIDTH-1:0]  host_base

    // smth else
);

reg [`AXIL_ADDR_WIDTH-1:0] awaddr_f;

assign awready = 1'b1;
always @(posedge clk) begin
    if(~rst_n) begin
        awaddr_f <= `AXIL_ADDR_WIDTH'h0;
    end 
    else begin
        if (awvalid)
            awaddr_f <= awaddr;
    end
end


always @(posedge clk) begin
    if(~rst_n) begin
        fpgaid <= `NOC_CHIPID_WIDTH'd0;
<%
for i in range(PITON_NUM_CHIPS):
    print(f'        chip{i}_base <= `AXI4_ADDR_WIDTH\'h0;')
%>
        host_base <= `AXI4_ADDR_WIDTH'h0;
    end 
    else begin
        if (wvalid) begin
            case (awaddr_f)
                `AXIL_ADDR_WIDTH'h8: fpgaid <= wdata[`NOC_CHIPID_WIDTH-1:0];
<%
for i in range(PITON_NUM_CHIPS):
    print(f'                `AXIL_ADDR_WIDTH\'h{0x1000+i*8+0x0:04x}: chip{i}_base <= {{chip{i}_base[`AXI4_ADDR_WIDTH-1:`AXIL_DATA_WIDTH], wdata}};')
    print(f'                `AXIL_ADDR_WIDTH\'h{0x1000+i*8+0x4:04x}: chip{i}_base <= {{wdata, chip{i}_base[`AXIL_DATA_WIDTH-1:0]}};')
print(f'                `AXIL_ADDR_WIDTH\'h{0x1000+PITON_NUM_CHIPS*8+0x0:04x}: host_base <= {{host_base[`AXI4_ADDR_WIDTH-1:`AXIL_DATA_WIDTH], wdata}};')
print(f'                `AXIL_ADDR_WIDTH\'h{0x1000+PITON_NUM_CHIPS*8+0x4:04x}: host_base <= {{wdata, host_base[`AXIL_DATA_WIDTH-1:0]}};')
%>
                default: begin end//nothing
            endcase // awaddr

        end    
    end
end

always @(posedge clk) begin
    if(~rst_n) begin
        bvalid <= 1'b0;
    end 
    else begin
        if (wvalid && wready) bvalid <= 1'b1;
        else if (bready) bvalid <= 1'b0;
        else bvalid <= bvalid;
    end
end

assign wready = ~bvalid | bready;
assign bresp = `AXIL_RESP_WIDTH'd0;



always @(*) begin 
    rdata = `AXIL_DATA_WIDTH'h0;
    case (araddr)
        `AXIL_ADDR_WIDTH'h8: rdata = {{(`AXIL_DATA_WIDTH-`NOC_CHIPID_WIDTH){1'b0}}, fpgaid};
<%
for i in range(PITON_NUM_CHIPS):
    print(f'        `AXIL_ADDR_WIDTH\'h{0x1000+i*8+0x0:04x}: rdata = chip{i}_base[`AXIL_DATA_WIDTH-1:0];')
    print(f'        `AXIL_ADDR_WIDTH\'h{0x1000+i*8+0x4:04x}: rdata = chip{i}_base[`AXI4_ADDR_WIDTH-1:`AXIL_DATA_WIDTH];')
print(f'        `AXIL_ADDR_WIDTH\'h{0x1000+PITON_NUM_CHIPS*8+0x0:04x}: rdata = host_base[`AXIL_DATA_WIDTH-1:0];')
print(f'        `AXIL_ADDR_WIDTH\'h{0x1000+PITON_NUM_CHIPS*8+0x4:04x}: rdata = host_base[`AXI4_ADDR_WIDTH-1:`AXIL_DATA_WIDTH];')
%>
        default: rdata = `AXIL_DATA_WIDTH'h0;
    endcase // araddr
end

assign rresp = `AXIL_RESP_WIDTH'd0;

assign arready = ~rvalid | rready;

always @(posedge clk) begin
    if(~rst_n) begin
        rvalid <= 1'b0;
    end 
    else begin
        if (arvalid && arready) rvalid <= 1'b1;
        else if (rready) rvalid <= 1'b0;
        else rvalid <= rvalid;
    end
end
 
endmodule : piton_aws_config_regs