// ========== Copyright Header Begin ============================================
// Copyright (c) 2023 Princeton University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ========== Copyright Header End ============================================

`include "define.tmp.h"

<% 
from pyhplib import *
%>

module axi2noc_noc_part(
    input piton_clk,
    input piton_rst_n,
    input axi_clk,
    input axi_rst_n,
    input [`NOC_CHIPID_WIDTH-1:0] fpgaid,
<%
for i in range(PITON_NUM_CHIPS):
    print(f'''\
    input   wire                                   chip{i}_data_val, 
    input   wire [`NOC_DATA_WIDTH-1:0]             chip{i}_data,
''')
%>
    input   wire                                   host_data_val, 
    input   wire [`NOC_DATA_WIDTH-1:0]             host_data,

    // Noc interface
    output  reg                                    noc_val,
    output  reg  [`NOC_DATA_WIDTH-1:0]             noc_data,
    input   wire                                   noc_rdy, 
    output  wire                                   noc_credit, 
    output  reg [`NOC_CHIPID_WIDTH-1:0]            noc_chosen_src

);


// noc fifos are never full because
// of the credit system

wire read_shaper = (noc_rdy | ~noc_val);

<%
print(f'''\
wire [`NOC_DATA_WIDTH-1:0] shaper_out[{PITON_NUM_CHIPS}:0];
wire [{PITON_NUM_CHIPS}:0] shaper_out_valid;
wire [{PITON_NUM_CHIPS}:0] shaper_empty = ~shaper_out_valid;
''')

for i in range(PITON_NUM_CHIPS):
    src_fpgaid = int(i / PITON_NUM_CHIPS_PER_FPGA)
    print(f'''\
traffic_shaper #(
    .DATA_WIDTH(`NOC_DATA_WIDTH), 
    .ADD_LATENCY_SLOW({PITON_LOCAL_LAT}),
    .ADD_LATENCY_FAST({PITON_GLOBAL_LAT}),
    .PKGS_PER_128_CYCLES_FAST(0), 
    .PKGS_PER_128_CYCLES_SLOW(0)
) noc_shaper{i} (
    .clk_out(piton_clk),
    .rst_n_out(piton_rst_n),
    .clk_in(axi_clk), 
    .rst_n_in(axi_rst_n),
    .fast(`NOC_CHIPID_WIDTH'd{src_fpgaid} != fpgaid),
    .valid_in(chip{i}_data_val),
    .data_in(chip{i}_data),
    .ready_in(),
    .valid_out(shaper_out_valid[{i}]),
    .data_out(shaper_out[{i}]),
    .ready_out(read_shaper & (noc_chosen_src == {i}))
);
''')

print(f'''\
traffic_shaper #(
    .DATA_WIDTH(`NOC_DATA_WIDTH), 
    .ADD_LATENCY_SLOW({PITON_LOCAL_LAT}),
    .ADD_LATENCY_FAST({PITON_GLOBAL_LAT}),
    .PKGS_PER_128_CYCLES_FAST(0),
    .PKGS_PER_128_CYCLES_SLOW(0)
) noc_shaper_host (
    .clk_out(piton_clk),
    .rst_n_out(piton_rst_n),
    .clk_in(axi_clk), 
    .rst_n_in(axi_rst_n),
    .fast(1),
    .valid_in(host_data_val),
    .data_in(host_data),
    .ready_in(),
    .valid_out(shaper_out_valid[{PITON_NUM_CHIPS}]),
    .data_out(shaper_out[{PITON_NUM_CHIPS}]),
    .ready_out(read_shaper & (noc_chosen_src >= {PITON_NUM_CHIPS}))
);
''')
%>

// do round robin over the fifos, try four fifos and then give up for the current cycle
reg [`MSG_LENGTH_WIDTH-1:0] flits_left;
reg [`NOC_CHIPID_WIDTH-1:0] noc_chosen_src_next;
wire [`MSG_LENGTH_WIDTH-1:0] flits_left_next = (flits_left > 0) ? flits_left - 1 : shaper_out[noc_chosen_src][`MSG_LENGTH];

<%
str = f'''\
always @(*) begin
    noc_chosen_src_next = (noc_chosen_src + 1) % {PITON_NUM_CHIPS + 1};
'''
for i in range(4):
    str += f'''\
    if (shaper_empty[noc_chosen_src_next]) noc_chosen_src_next = (noc_chosen_src_next + 1) % {PITON_NUM_CHIPS + 1};
'''
str += "end\n"
print(str)

print(f'''\
always @(posedge piton_clk) begin
    if (~piton_rst_n) begin
        flits_left <= `MSG_LENGTH_WIDTH'b0;
        noc_chosen_src <= `NOC_CHIPID_WIDTH'b0;
    end
    else begin
        if (read_shaper & shaper_out_valid[noc_chosen_src]) begin
            flits_left <= flits_left_next;
            if (flits_left_next == 0) 
                noc_chosen_src <= noc_chosen_src_next;
        end
        else begin
            if ((flits_left == 0) & shaper_empty[noc_chosen_src])
                noc_chosen_src <= noc_chosen_src_next;
        end
    end
end
''')
%>

// fields
always @(posedge piton_clk) begin
    if (~piton_rst_n) begin
        noc_val <= 1'b0;
        noc_data <= `NOC_DATA_WIDTH'b0;
    end
    else begin
        if (read_shaper) begin
            noc_val <= shaper_out_valid[noc_chosen_src];
            noc_data <= shaper_out[noc_chosen_src];
        end
    end
end

assign noc_credit = read_shaper & shaper_out_valid[noc_chosen_src];

endmodule